# NOTE: USE NODE 14 WITH THE MOST RECENT VERSION OF SERVERLESS
# WITH NODE 12 THE DEPLOYMENT DOES NOT WORK - REASON:
    # in node12, not specifying the 'handler' in 'functions' raises an error during deployment, that the 'handler' is missing
    # however adding the handler seems to replace the specified docker image!
    # Namely, after deployment the lambda function is not connected
    # to the image, it's just the uploaded code that cannot run due to the missing dependencies!
    # In node14 the behavior is actually correct - specifying both 'image' and 'handler' raises an error
   # that only one of the two is allowed to be specified)!
service: serverless-imageclassifier-pytorch

plugins:
  - serverless-python-requirements
  
custom:
  pythonRequirements:
    dockerizePip: non-linux
    zip: true

provider:
  name: aws
  runtime: python3.8
  memorySize: 4096
  timeout: 30  # default API Gateway timeout; does not make sense to increase it beyond 30 seconds
  stage: ${opt:stage, "dev"}
  region: ${opt:stage, "eu-west-1"}
  apiGateway:
    shouldStartNameWithService: true

  environment:
    AUTH0_JWKS_URL: "https://dev-75ascs57.eu.auth0.com/.well-known/jwks.json"
    AUTH0_CLIENT_ID: "lUPVyZGjaYb44tI1Z0lZXvd5wPEaa2B8"
    AUTH0_DOMAIN: "dev-75ascs57.eu.auth0.com"
    ECR_REPOSITORY_URI: "384578942266.dkr.ecr.eu-west-1.amazonaws.com/pytorch-timm-image-classification"
    ECR_IMAGE_DIGEST: sha256:eab2fc282a7f0fd50874a6304dba5c055ecb5e29fcb3c41b4527fa75565fde62

functions:
  imagepredicttop5:
    image: ${self:provider.environment.ECR_REPOSITORY_URI}@${self:provider.environment.ECR_IMAGE_DIGEST}
    events:
      - http:
          path: predict
          method: post
          cors: true
          # authorizer: auth

  auth:
    handler: auth.lambda_handler
    events:
      - http:
          path: /auth
          method: post
          cors: true